chrome.action.onClicked.addListener(() => { chrome.tabs.create({ url: "https://my.subzy.app" }) }); chrome.runtime.onInstalled.addListener(r => { r.reason === "install" && chrome.tabs.create({ url: "https://my.subzy.app/help" }) }); chrome.runtime.onMessage.addListener((r, a, t) => { if (r.type === "OPEN_SUBZY_TAB") return chrome.tabs.create({ url: "https://my.subzy.app/login", active: !0 }).then(e => { t({ success: !0, tabId: e.id }) }).catch(e => { console.error("Subzy: Error creating tab:", e), t({ success: !1, error: e.message }) }), !0; if (r.type === "GET_SUBZY_COOKIES") return chrome.cookies.getAll({ domain: "my.subzy.app" }).then(e => { t({ success: !0, cookies: e }) }).catch(e => { console.error("Subzy: Error getting cookies:", e), t({ success: !1, error: e.message }) }), !0; if (r.type === "SET_SUBZY_COOKIE") { const { name: e, value: s, domain: c = "my.subzy.app/login", path: i = "/" } = r.cookieDetails; return chrome.cookies.set({ url: `https://${c}`, name: e, value: s, domain: c, path: i }).then(o => { t({ success: !0, cookie: o }) }).catch(o => { console.error("Subzy: Error setting cookie:", o), t({ success: !1, error: o.message }) }), !0 } if (r.type === "REMOVE_SUBZY_COOKIE") { const { url: e, name: s } = r.cookieDetails; return chrome.cookies.remove({ url: e, name: s }).then(c => { t({ success: !0, details: c }) }).catch(c => { console.error("Subzy: Error removing cookie:", c), t({ success: !1, error: c.message }) }), !0 } r.type }); chrome.tabs.onUpdated.addListener((r, a, t) => { var e; a.status === "complete" && ((e = t.url) != null && e.includes("my.subzy.app/login")) });
